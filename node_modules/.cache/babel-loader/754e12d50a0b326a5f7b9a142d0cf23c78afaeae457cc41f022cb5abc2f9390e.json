{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getAuth, createUserWithEmailAndPassword } from 'firebase/auth';\nimport { getAnalytics } from \"firebase/analytics\";\nimport { getFirestore, doc, setDoc, getDocs, collection, query, where } from 'firebase/firestore';\nconst firebaseConfig = {\n  // Substitua estas configurações pelas suas próprias do Firebase Console\n  apiKey: \"AIzaSyCUgM3pmBHVYNCSoSi0jQgsIqnK-zPizmk\",\n  authDomain: \"newliv-db.firebaseapp.com\",\n  projectId: \"newliv-db\",\n  storageBucket: \"newliv-db.firebasestorage.app\",\n  messagingSenderId: \"188860434955\",\n  appId: \"1:188860434955:web:eaa51bd5b670235c0a150e\",\n  measurementId: \"G-4GC296K7NN\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport const analytics = getAnalytics(app);\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\n\n// Função para criar um novo usuário com estrutura específica\nexport const createUserWithRole = async (uid, role, {\n  name,\n  email\n}) => {\n  try {\n    const userData = {\n      role,\n      // 'gestor' ou 'corretor'\n      name,\n      // nome completo do usuário\n      email,\n      // email do usuário\n      createdAt: new Date().toISOString(),\n      status: 'active',\n      lastLogin: new Date().toISOString()\n    };\n    await setDoc(doc(db, 'users', uid), userData);\n    return userData;\n  } catch (error) {\n    console.error('Erro ao criar usuário:', error);\n    throw error;\n  }\n};\n\n// Função para verificar se já existe um gestor\nconst checkIfAdminExists = async () => {\n  try {\n    const q = query(collection(db, 'users'), where('role', '==', 'gestor'));\n    const querySnapshot = await getDocs(q);\n    return !querySnapshot.empty;\n  } catch (error) {\n    console.error('Erro ao verificar gestor:', error);\n    return false;\n  }\n};\n\n// Função para criar o primeiro gestor\nexport const createFirstAdmin = async (email, password, name) => {\n  try {\n    // Verifica se já existe um gestor\n    const adminExists = await checkIfAdminExists();\n    if (adminExists) {\n      return {\n        success: false,\n        message: 'Já existe um gestor cadastrado no sistema.'\n      };\n    }\n\n    // Verifica se o email contém \"gestor\"\n    if (!email.includes('gestor')) {\n      return {\n        success: false,\n        message: 'O email do gestor deve conter a palavra \"gestor\"'\n      };\n    }\n\n    // Cria o usuário no Authentication\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n\n    // Cria o documento do usuário no Firestore\n    await createUserWithRole(userCredential.user.uid, 'gestor', {\n      name,\n      email\n    });\n    return {\n      success: true,\n      message: 'Gestor criado com sucesso! Você já pode fazer login.',\n      uid: userCredential.user.uid\n    };\n  } catch (error) {\n    console.error('Erro ao criar gestor:', error);\n\n    // Tratamento específico para cada tipo de erro\n    if (error.code === 'auth/email-already-in-use') {\n      return {\n        success: false,\n        message: 'Este email já está sendo usado. Por favor, use outro email.'\n      };\n    } else if (error.code === 'auth/weak-password') {\n      return {\n        success: false,\n        message: 'A senha deve ter pelo menos 6 caracteres.'\n      };\n    } else if (error.code === 'auth/invalid-email') {\n      return {\n        success: false,\n        message: 'Email inválido. Por favor, verifique o formato do email.'\n      };\n    }\n    return {\n      success: false,\n      message: 'Erro ao criar gestor. Por favor, tente novamente.'\n    };\n  }\n};\nexport default app;","map":{"version":3,"names":["initializeApp","getAuth","createUserWithEmailAndPassword","getAnalytics","getFirestore","doc","setDoc","getDocs","collection","query","where","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","analytics","auth","db","createUserWithRole","uid","role","name","email","userData","createdAt","Date","toISOString","status","lastLogin","error","console","checkIfAdminExists","q","querySnapshot","empty","createFirstAdmin","password","adminExists","success","message","includes","userCredential","user","code"],"sources":["C:/Users/hexshadeveloper/Desktop/project/test1/src/firebase.js"],"sourcesContent":["import { initializeApp } from 'firebase/app';\r\nimport { getAuth, createUserWithEmailAndPassword } from 'firebase/auth';\r\nimport { getAnalytics } from \"firebase/analytics\";\r\nimport { getFirestore, doc, setDoc, getDocs, collection, query, where } from 'firebase/firestore';\r\n\r\nconst firebaseConfig = {\r\n  // Substitua estas configurações pelas suas próprias do Firebase Console\r\n  apiKey: \"AIzaSyCUgM3pmBHVYNCSoSi0jQgsIqnK-zPizmk\",\r\n  authDomain: \"newliv-db.firebaseapp.com\",\r\n  projectId: \"newliv-db\",\r\n  storageBucket: \"newliv-db.firebasestorage.app\",\r\n  messagingSenderId: \"188860434955\",\r\n  appId: \"1:188860434955:web:eaa51bd5b670235c0a150e\",\r\n  measurementId: \"G-4GC296K7NN\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nexport const analytics = getAnalytics(app);\r\nexport const auth = getAuth(app);\r\nexport const db = getFirestore(app);\r\n\r\n// Função para criar um novo usuário com estrutura específica\r\nexport const createUserWithRole = async (uid, role, { name, email }) => {\r\n  try {\r\n    const userData = {\r\n      role,          // 'gestor' ou 'corretor'\r\n      name,          // nome completo do usuário\r\n      email,         // email do usuário\r\n      createdAt: new Date().toISOString(),\r\n      status: 'active',\r\n      lastLogin: new Date().toISOString(),\r\n    };\r\n\r\n    await setDoc(doc(db, 'users', uid), userData);\r\n    return userData;\r\n  } catch (error) {\r\n    console.error('Erro ao criar usuário:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Função para verificar se já existe um gestor\r\nconst checkIfAdminExists = async () => {\r\n  try {\r\n    const q = query(collection(db, 'users'), where('role', '==', 'gestor'));\r\n    const querySnapshot = await getDocs(q);\r\n    return !querySnapshot.empty;\r\n  } catch (error) {\r\n    console.error('Erro ao verificar gestor:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Função para criar o primeiro gestor\r\nexport const createFirstAdmin = async (email, password, name) => {\r\n  try {\r\n    // Verifica se já existe um gestor\r\n    const adminExists = await checkIfAdminExists();\r\n    if (adminExists) {\r\n      return {\r\n        success: false,\r\n        message: 'Já existe um gestor cadastrado no sistema.'\r\n      };\r\n    }\r\n\r\n    // Verifica se o email contém \"gestor\"\r\n    if (!email.includes('gestor')) {\r\n      return {\r\n        success: false,\r\n        message: 'O email do gestor deve conter a palavra \"gestor\"'\r\n      };\r\n    }\r\n\r\n    // Cria o usuário no Authentication\r\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n    \r\n    // Cria o documento do usuário no Firestore\r\n    await createUserWithRole(userCredential.user.uid, 'gestor', {\r\n      name,\r\n      email,\r\n    });\r\n\r\n    return {\r\n      success: true,\r\n      message: 'Gestor criado com sucesso! Você já pode fazer login.',\r\n      uid: userCredential.user.uid\r\n    };\r\n  } catch (error) {\r\n    console.error('Erro ao criar gestor:', error);\r\n    \r\n    // Tratamento específico para cada tipo de erro\r\n    if (error.code === 'auth/email-already-in-use') {\r\n      return {\r\n        success: false,\r\n        message: 'Este email já está sendo usado. Por favor, use outro email.'\r\n      };\r\n    } else if (error.code === 'auth/weak-password') {\r\n      return {\r\n        success: false,\r\n        message: 'A senha deve ter pelo menos 6 caracteres.'\r\n      };\r\n    } else if (error.code === 'auth/invalid-email') {\r\n      return {\r\n        success: false,\r\n        message: 'Email inválido. Por favor, verifique o formato do email.'\r\n      };\r\n    }\r\n\r\n    return {\r\n      success: false,\r\n      message: 'Erro ao criar gestor. Por favor, tente novamente.'\r\n    };\r\n  }\r\n};\r\n\r\nexport default app; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}