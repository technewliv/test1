{"ast":null,"code":"import _objectSpread from\"C:/Users/hexshadeveloper/Desktop/project/test1/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _objectWithoutProperties from\"C:/Users/hexshadeveloper/Desktop/project/test1/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";const _excluded=[\"uid\"];import{initializeApp}from'firebase/app';import{getAuth,createUserWithEmailAndPassword}from'firebase/auth';import{getAnalytics}from\"firebase/analytics\";import{getStorage}from'firebase/storage';import{getFirestore,doc,setDoc,getDocs,collection,query,where}from'firebase/firestore';const firebaseConfig={// Substitua estas configurações pelas suas próprias do Firebase Console\napiKey:\"AIzaSyCUgM3pmBHVYNCSoSi0jQgsIqnK-zPizmk\",authDomain:\"newliv-db.firebaseapp.com\",projectId:\"newliv-db\",storageBucket:\"newliv-db.appspot.com\",messagingSenderId:\"188860434955\",appId:\"1:188860434955:web:eaa51bd5b670235c0a150e\",measurementId:\"G-4GC296K7NN\"};// Initialize Firebase\nconst app=initializeApp(firebaseConfig);export const analytics=getAnalytics(app);export const auth=getAuth(app);export const db=getFirestore(app);export const storage=getStorage(app);// Função para criar um novo usuário com estrutura específica\nexport const createUserWithRole=async userData=>{try{const{uid}=userData,restData=_objectWithoutProperties(userData,_excluded);console.log('Criando documento do usuário:',uid,restData);// Cria o documento do usuário com dados adicionais\nawait setDoc(doc(db,'users',uid),_objectSpread(_objectSpread({},restData),{},{updatedAt:new Date().toISOString(),createdAt:new Date().toISOString(),status:'active',lastLogin:new Date().toISOString()}));console.log('Documento do usuário criado com sucesso');return{success:true};}catch(error){console.error('Erro detalhado ao criar usuário:',{code:error.code,message:error.message,details:error});throw error;}};// Função para verificar e criar documento de usuário se necessário\nexport const verifyAndCreateUserDocument=async function(user){let defaultRole=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'corretor';try{console.log('Verificando documento do usuário:',user.uid);const userDocRef=doc(db,'users',user.uid);// Determina o papel com base no email\nconst role=user.email.includes('gestor')?'gestor':defaultRole;// Cria o documento se não existir\nawait setDoc(userDocRef,{email:user.email,name:user.displayName||user.email.split('@')[0],role,status:'active',createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),lastLogin:new Date().toISOString()},{merge:true});console.log('Documento do usuário verificado/criado com sucesso');return{success:true,role};}catch(error){console.error('Erro ao verificar/criar documento do usuário:',error);throw error;}};// Função para verificar se já existe um gestor\nexport const checkIfAdminExists=async()=>{try{console.log('Verificando existência de gestor...');const q=query(collection(db,'users'),where('role','==','gestor'));const querySnapshot=await getDocs(q);const exists=!querySnapshot.empty;console.log('Gestor existe?',exists);return exists;}catch(error){console.error('Erro ao verificar gestor:',error);return false;}};// Função para criar o primeiro gestor\nexport const createFirstAdmin=async(email,password,name)=>{try{console.log('Iniciando criação do primeiro gestor...');// Verifica se já existe um gestor\nconst adminExists=await checkIfAdminExists();if(adminExists){console.log('Já existe um gestor no sistema');return{success:false,message:'Já existe um gestor cadastrado no sistema.'};}// Verifica se o email contém \"gestor\"\nif(!email.includes('gestor')){console.log('Email não contém a palavra \"gestor\"');return{success:false,message:'O email do gestor deve conter a palavra \"gestor\"'};}// Cria o usuário no Authentication\nconsole.log('Criando usuário no Authentication...');const userCredential=await createUserWithEmailAndPassword(auth,email,password);console.log('Usuário criado:',userCredential.user.uid);// Cria o documento do usuário no Firestore\nconsole.log('Criando documento do gestor no Firestore...');await createUserWithRole({uid:userCredential.user.uid,email:userCredential.user.email,name,role:'gestor'});console.log('Gestor criado com sucesso');return{success:true,message:'Gestor criado com sucesso! Você já pode fazer login.',uid:userCredential.user.uid};}catch(error){console.error('Erro detalhado ao criar gestor:',{code:error.code,message:error.message,details:error});if(error.code==='auth/email-already-in-use'){return{success:false,message:'Este email já está sendo usado. Por favor, use outro email.'};}return{success:false,message:'Erro ao criar gestor. Por favor, tente novamente.'};}};// Regras de Segurança do Firestore\n/*\r\nrules_version = '2';\r\nservice cloud.firestore {\r\n  match /databases/{database}/documents {\r\n    match /{document=**} {\r\n      allow read, write: if request.auth != null;\r\n    }\r\n  }\r\n}\r\n*/export default app;","map":{"version":3,"names":["initializeApp","getAuth","createUserWithEmailAndPassword","getAnalytics","getStorage","getFirestore","doc","setDoc","getDocs","collection","query","where","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","analytics","auth","db","storage","createUserWithRole","userData","uid","restData","_objectWithoutProperties","_excluded","console","log","_objectSpread","updatedAt","Date","toISOString","createdAt","status","lastLogin","success","error","code","message","details","verifyAndCreateUserDocument","user","defaultRole","arguments","length","undefined","userDocRef","role","email","includes","name","displayName","split","merge","checkIfAdminExists","q","querySnapshot","exists","empty","createFirstAdmin","password","adminExists","userCredential"],"sources":["C:/Users/hexshadeveloper/Desktop/project/test1/src/firebase.js"],"sourcesContent":["import { initializeApp } from 'firebase/app';\r\nimport { getAuth, createUserWithEmailAndPassword } from 'firebase/auth';\r\nimport { getAnalytics } from \"firebase/analytics\";\r\nimport { getStorage } from 'firebase/storage';\r\nimport { \r\n  getFirestore, \r\n  doc, \r\n  setDoc, \r\n  getDocs, \r\n  collection, \r\n  query, \r\n  where\r\n} from 'firebase/firestore';\r\n\r\nconst firebaseConfig = {\r\n  // Substitua estas configurações pelas suas próprias do Firebase Console\r\n  apiKey: \"AIzaSyCUgM3pmBHVYNCSoSi0jQgsIqnK-zPizmk\",\r\n  authDomain: \"newliv-db.firebaseapp.com\",\r\n  projectId: \"newliv-db\",\r\n  storageBucket: \"newliv-db.appspot.com\",\r\n  messagingSenderId: \"188860434955\",\r\n  appId: \"1:188860434955:web:eaa51bd5b670235c0a150e\",\r\n  measurementId: \"G-4GC296K7NN\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nexport const analytics = getAnalytics(app);\r\nexport const auth = getAuth(app);\r\nexport const db = getFirestore(app);\r\nexport const storage = getStorage(app);\r\n\r\n// Função para criar um novo usuário com estrutura específica\r\nexport const createUserWithRole = async (userData) => {\r\n  try {\r\n    const { uid, ...restData } = userData;\r\n    console.log('Criando documento do usuário:', uid, restData);\r\n\r\n    // Cria o documento do usuário com dados adicionais\r\n    await setDoc(doc(db, 'users', uid), {\r\n      ...restData,\r\n      updatedAt: new Date().toISOString(),\r\n      createdAt: new Date().toISOString(),\r\n      status: 'active',\r\n      lastLogin: new Date().toISOString()\r\n    });\r\n\r\n    console.log('Documento do usuário criado com sucesso');\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error('Erro detalhado ao criar usuário:', {\r\n      code: error.code,\r\n      message: error.message,\r\n      details: error\r\n    });\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Função para verificar e criar documento de usuário se necessário\r\nexport const verifyAndCreateUserDocument = async (user, defaultRole = 'corretor') => {\r\n  try {\r\n    console.log('Verificando documento do usuário:', user.uid);\r\n    const userDocRef = doc(db, 'users', user.uid);\r\n    \r\n    // Determina o papel com base no email\r\n    const role = user.email.includes('gestor') ? 'gestor' : defaultRole;\r\n    \r\n    // Cria o documento se não existir\r\n    await setDoc(userDocRef, {\r\n      email: user.email,\r\n      name: user.displayName || user.email.split('@')[0],\r\n      role,\r\n      status: 'active',\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString(),\r\n      lastLogin: new Date().toISOString()\r\n    }, { merge: true });\r\n\r\n    console.log('Documento do usuário verificado/criado com sucesso');\r\n    return { success: true, role };\r\n  } catch (error) {\r\n    console.error('Erro ao verificar/criar documento do usuário:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Função para verificar se já existe um gestor\r\nexport const checkIfAdminExists = async () => {\r\n  try {\r\n    console.log('Verificando existência de gestor...');\r\n    const q = query(collection(db, 'users'), where('role', '==', 'gestor'));\r\n    const querySnapshot = await getDocs(q);\r\n    const exists = !querySnapshot.empty;\r\n    console.log('Gestor existe?', exists);\r\n    return exists;\r\n  } catch (error) {\r\n    console.error('Erro ao verificar gestor:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Função para criar o primeiro gestor\r\nexport const createFirstAdmin = async (email, password, name) => {\r\n  try {\r\n    console.log('Iniciando criação do primeiro gestor...');\r\n    \r\n    // Verifica se já existe um gestor\r\n    const adminExists = await checkIfAdminExists();\r\n    if (adminExists) {\r\n      console.log('Já existe um gestor no sistema');\r\n      return {\r\n        success: false,\r\n        message: 'Já existe um gestor cadastrado no sistema.'\r\n      };\r\n    }\r\n\r\n    // Verifica se o email contém \"gestor\"\r\n    if (!email.includes('gestor')) {\r\n      console.log('Email não contém a palavra \"gestor\"');\r\n      return {\r\n        success: false,\r\n        message: 'O email do gestor deve conter a palavra \"gestor\"'\r\n      };\r\n    }\r\n\r\n    // Cria o usuário no Authentication\r\n    console.log('Criando usuário no Authentication...');\r\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n    console.log('Usuário criado:', userCredential.user.uid);\r\n    \r\n    // Cria o documento do usuário no Firestore\r\n    console.log('Criando documento do gestor no Firestore...');\r\n    await createUserWithRole({\r\n      uid: userCredential.user.uid,\r\n      email: userCredential.user.email,\r\n      name,\r\n      role: 'gestor',\r\n    });\r\n\r\n    console.log('Gestor criado com sucesso');\r\n    return {\r\n      success: true,\r\n      message: 'Gestor criado com sucesso! Você já pode fazer login.',\r\n      uid: userCredential.user.uid\r\n    };\r\n  } catch (error) {\r\n    console.error('Erro detalhado ao criar gestor:', {\r\n      code: error.code,\r\n      message: error.message,\r\n      details: error\r\n    });\r\n    \r\n    if (error.code === 'auth/email-already-in-use') {\r\n      return {\r\n        success: false,\r\n        message: 'Este email já está sendo usado. Por favor, use outro email.'\r\n      };\r\n    }\r\n    \r\n    return {\r\n      success: false,\r\n      message: 'Erro ao criar gestor. Por favor, tente novamente.'\r\n    };\r\n  }\r\n};\r\n\r\n// Regras de Segurança do Firestore\r\n/*\r\nrules_version = '2';\r\nservice cloud.firestore {\r\n  match /databases/{database}/documents {\r\n    match /{document=**} {\r\n      allow read, write: if request.auth != null;\r\n    }\r\n  }\r\n}\r\n*/\r\n\r\nexport default app; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}