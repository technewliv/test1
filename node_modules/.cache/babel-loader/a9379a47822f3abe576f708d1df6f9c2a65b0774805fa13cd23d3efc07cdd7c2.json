{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getAuth, createUserWithEmailAndPassword } from 'firebase/auth';\nimport { getAnalytics } from \"firebase/analytics\";\nimport { getFirestore, doc, setDoc, getDocs, collection, query, where, connectFirestoreEmulator } from 'firebase/firestore';\nconst firebaseConfig = {\n  // Substitua estas configurações pelas suas próprias do Firebase Console\n  apiKey: \"AIzaSyCUgM3pmBHVYNCSoSi0jQgsIqnK-zPizmk\",\n  authDomain: \"newliv-db.firebaseapp.com\",\n  projectId: \"newliv-db\",\n  storageBucket: \"newliv-db.appspot.com\",\n  messagingSenderId: \"188860434955\",\n  appId: \"1:188860434955:web:eaa51bd5b670235c0a150e\",\n  measurementId: \"G-4GC296K7NN\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport const analytics = getAnalytics(app);\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\n\n// Função para criar um novo usuário com estrutura específica\nexport const createUserWithRole = async userData => {\n  try {\n    const {\n      uid,\n      ...restData\n    } = userData;\n    console.log('Criando documento do usuário:', uid, restData);\n\n    // Cria o documento do usuário com dados adicionais\n    await setDoc(doc(db, 'users', uid), {\n      ...restData,\n      updatedAt: new Date().toISOString(),\n      createdAt: new Date().toISOString(),\n      status: 'active',\n      lastLogin: new Date().toISOString()\n    });\n    console.log('Documento do usuário criado com sucesso');\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('Erro detalhado ao criar usuário:', {\n      code: error.code,\n      message: error.message,\n      details: error\n    });\n    throw error;\n  }\n};\n\n// Função para verificar se já existe um gestor\nexport const checkIfAdminExists = async () => {\n  try {\n    console.log('Verificando existência de gestor...');\n    const q = query(collection(db, 'users'), where('role', '==', 'gestor'));\n    const querySnapshot = await getDocs(q);\n    const exists = !querySnapshot.empty;\n    console.log('Gestor existe?', exists);\n    return exists;\n  } catch (error) {\n    console.error('Erro ao verificar gestor:', error);\n    return false;\n  }\n};\n\n// Função para criar o primeiro gestor\nexport const createFirstAdmin = async (email, password, name) => {\n  try {\n    console.log('Iniciando criação do primeiro gestor...');\n\n    // Verifica se já existe um gestor\n    const adminExists = await checkIfAdminExists();\n    if (adminExists) {\n      console.log('Já existe um gestor no sistema');\n      return {\n        success: false,\n        message: 'Já existe um gestor cadastrado no sistema.'\n      };\n    }\n\n    // Verifica se o email contém \"gestor\"\n    if (!email.includes('gestor')) {\n      console.log('Email não contém a palavra \"gestor\"');\n      return {\n        success: false,\n        message: 'O email do gestor deve conter a palavra \"gestor\"'\n      };\n    }\n\n    // Cria o usuário no Authentication\n    console.log('Criando usuário no Authentication...');\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    console.log('Usuário criado:', userCredential.user.uid);\n\n    // Cria o documento do usuário no Firestore\n    console.log('Criando documento do gestor no Firestore...');\n    await createUserWithRole({\n      uid: userCredential.user.uid,\n      email: userCredential.user.email,\n      name,\n      role: 'gestor'\n    });\n    console.log('Gestor criado com sucesso');\n    return {\n      success: true,\n      message: 'Gestor criado com sucesso! Você já pode fazer login.',\n      uid: userCredential.user.uid\n    };\n  } catch (error) {\n    console.error('Erro detalhado ao criar gestor:', {\n      code: error.code,\n      message: error.message,\n      details: error\n    });\n    if (error.code === 'auth/email-already-in-use') {\n      return {\n        success: false,\n        message: 'Este email já está sendo usado. Por favor, use outro email.'\n      };\n    }\n    return {\n      success: false,\n      message: 'Erro ao criar gestor. Por favor, tente novamente.'\n    };\n  }\n};\nexport default app;","map":{"version":3,"names":["initializeApp","getAuth","createUserWithEmailAndPassword","getAnalytics","getFirestore","doc","setDoc","getDocs","collection","query","where","connectFirestoreEmulator","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","analytics","auth","db","createUserWithRole","userData","uid","restData","console","log","updatedAt","Date","toISOString","createdAt","status","lastLogin","success","error","code","message","details","checkIfAdminExists","q","querySnapshot","exists","empty","createFirstAdmin","email","password","name","adminExists","includes","userCredential","user","role"],"sources":["C:/Users/hexshadeveloper/Desktop/project/test1/src/firebase.js"],"sourcesContent":["import { initializeApp } from 'firebase/app';\r\nimport { getAuth, createUserWithEmailAndPassword } from 'firebase/auth';\r\nimport { getAnalytics } from \"firebase/analytics\";\r\nimport { \r\n  getFirestore, \r\n  doc, \r\n  setDoc, \r\n  getDocs, \r\n  collection, \r\n  query, \r\n  where,\r\n  connectFirestoreEmulator \r\n} from 'firebase/firestore';\r\n\r\nconst firebaseConfig = {\r\n  // Substitua estas configurações pelas suas próprias do Firebase Console\r\n  apiKey: \"AIzaSyCUgM3pmBHVYNCSoSi0jQgsIqnK-zPizmk\",\r\n  authDomain: \"newliv-db.firebaseapp.com\",\r\n  projectId: \"newliv-db\",\r\n  storageBucket: \"newliv-db.appspot.com\",\r\n  messagingSenderId: \"188860434955\",\r\n  appId: \"1:188860434955:web:eaa51bd5b670235c0a150e\",\r\n  measurementId: \"G-4GC296K7NN\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nexport const analytics = getAnalytics(app);\r\nexport const auth = getAuth(app);\r\nexport const db = getFirestore(app);\r\n\r\n// Função para criar um novo usuário com estrutura específica\r\nexport const createUserWithRole = async (userData) => {\r\n  try {\r\n    const { uid, ...restData } = userData;\r\n    console.log('Criando documento do usuário:', uid, restData);\r\n\r\n    // Cria o documento do usuário com dados adicionais\r\n    await setDoc(doc(db, 'users', uid), {\r\n      ...restData,\r\n      updatedAt: new Date().toISOString(),\r\n      createdAt: new Date().toISOString(),\r\n      status: 'active',\r\n      lastLogin: new Date().toISOString()\r\n    });\r\n\r\n    console.log('Documento do usuário criado com sucesso');\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error('Erro detalhado ao criar usuário:', {\r\n      code: error.code,\r\n      message: error.message,\r\n      details: error\r\n    });\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Função para verificar se já existe um gestor\r\nexport const checkIfAdminExists = async () => {\r\n  try {\r\n    console.log('Verificando existência de gestor...');\r\n    const q = query(collection(db, 'users'), where('role', '==', 'gestor'));\r\n    const querySnapshot = await getDocs(q);\r\n    const exists = !querySnapshot.empty;\r\n    console.log('Gestor existe?', exists);\r\n    return exists;\r\n  } catch (error) {\r\n    console.error('Erro ao verificar gestor:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Função para criar o primeiro gestor\r\nexport const createFirstAdmin = async (email, password, name) => {\r\n  try {\r\n    console.log('Iniciando criação do primeiro gestor...');\r\n    \r\n    // Verifica se já existe um gestor\r\n    const adminExists = await checkIfAdminExists();\r\n    if (adminExists) {\r\n      console.log('Já existe um gestor no sistema');\r\n      return {\r\n        success: false,\r\n        message: 'Já existe um gestor cadastrado no sistema.'\r\n      };\r\n    }\r\n\r\n    // Verifica se o email contém \"gestor\"\r\n    if (!email.includes('gestor')) {\r\n      console.log('Email não contém a palavra \"gestor\"');\r\n      return {\r\n        success: false,\r\n        message: 'O email do gestor deve conter a palavra \"gestor\"'\r\n      };\r\n    }\r\n\r\n    // Cria o usuário no Authentication\r\n    console.log('Criando usuário no Authentication...');\r\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n    console.log('Usuário criado:', userCredential.user.uid);\r\n    \r\n    // Cria o documento do usuário no Firestore\r\n    console.log('Criando documento do gestor no Firestore...');\r\n    await createUserWithRole({\r\n      uid: userCredential.user.uid,\r\n      email: userCredential.user.email,\r\n      name,\r\n      role: 'gestor',\r\n    });\r\n\r\n    console.log('Gestor criado com sucesso');\r\n    return {\r\n      success: true,\r\n      message: 'Gestor criado com sucesso! Você já pode fazer login.',\r\n      uid: userCredential.user.uid\r\n    };\r\n  } catch (error) {\r\n    console.error('Erro detalhado ao criar gestor:', {\r\n      code: error.code,\r\n      message: error.message,\r\n      details: error\r\n    });\r\n    \r\n    if (error.code === 'auth/email-already-in-use') {\r\n      return {\r\n        success: false,\r\n        message: 'Este email já está sendo usado. Por favor, use outro email.'\r\n      };\r\n    }\r\n    \r\n    return {\r\n      success: false,\r\n      message: 'Erro ao criar gestor. Por favor, tente novamente.'\r\n    };\r\n  }\r\n};\r\n\r\nexport default app; "],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SAASC,OAAO,EAAEC,8BAA8B,QAAQ,eAAe;AACvE,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SACEC,YAAY,EACZC,GAAG,EACHC,MAAM,EACNC,OAAO,EACPC,UAAU,EACVC,KAAK,EACLC,KAAK,EACLC,wBAAwB,QACnB,oBAAoB;AAE3B,MAAMC,cAAc,GAAG;EACrB;EACAC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,2BAA2B;EACvCC,SAAS,EAAE,WAAW;EACtBC,aAAa,EAAE,uBAAuB;EACtCC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE,2CAA2C;EAClDC,aAAa,EAAE;AACjB,CAAC;;AAED;AACA,MAAMC,GAAG,GAAGpB,aAAa,CAACY,cAAc,CAAC;AACzC,OAAO,MAAMS,SAAS,GAAGlB,YAAY,CAACiB,GAAG,CAAC;AAC1C,OAAO,MAAME,IAAI,GAAGrB,OAAO,CAACmB,GAAG,CAAC;AAChC,OAAO,MAAMG,EAAE,GAAGnB,YAAY,CAACgB,GAAG,CAAC;;AAEnC;AACA,OAAO,MAAMI,kBAAkB,GAAG,MAAOC,QAAQ,IAAK;EACpD,IAAI;IACF,MAAM;MAAEC,GAAG;MAAE,GAAGC;IAAS,CAAC,GAAGF,QAAQ;IACrCG,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEH,GAAG,EAAEC,QAAQ,CAAC;;IAE3D;IACA,MAAMrB,MAAM,CAACD,GAAG,CAACkB,EAAE,EAAE,OAAO,EAAEG,GAAG,CAAC,EAAE;MAClC,GAAGC,QAAQ;MACXG,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACnCC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACnCE,MAAM,EAAE,QAAQ;MAChBC,SAAS,EAAE,IAAIJ,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;IAEFJ,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;IACtD,OAAO;MAAEO,OAAO,EAAE;IAAK,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdT,OAAO,CAACS,KAAK,CAAC,kCAAkC,EAAE;MAChDC,IAAI,EAAED,KAAK,CAACC,IAAI;MAChBC,OAAO,EAAEF,KAAK,CAACE,OAAO;MACtBC,OAAO,EAAEH;IACX,CAAC,CAAC;IACF,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC5C,IAAI;IACFb,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;IAClD,MAAMa,CAAC,GAAGjC,KAAK,CAACD,UAAU,CAACe,EAAE,EAAE,OAAO,CAAC,EAAEb,KAAK,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;IACvE,MAAMiC,aAAa,GAAG,MAAMpC,OAAO,CAACmC,CAAC,CAAC;IACtC,MAAME,MAAM,GAAG,CAACD,aAAa,CAACE,KAAK;IACnCjB,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEe,MAAM,CAAC;IACrC,OAAOA,MAAM;EACf,CAAC,CAAC,OAAOP,KAAK,EAAE;IACdT,OAAO,CAACS,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,OAAO,MAAMS,gBAAgB,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,EAAEC,IAAI,KAAK;EAC/D,IAAI;IACFrB,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;;IAEtD;IACA,MAAMqB,WAAW,GAAG,MAAMT,kBAAkB,CAAC,CAAC;IAC9C,IAAIS,WAAW,EAAE;MACftB,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;MAC7C,OAAO;QACLO,OAAO,EAAE,KAAK;QACdG,OAAO,EAAE;MACX,CAAC;IACH;;IAEA;IACA,IAAI,CAACQ,KAAK,CAACI,QAAQ,CAAC,QAAQ,CAAC,EAAE;MAC7BvB,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;MAClD,OAAO;QACLO,OAAO,EAAE,KAAK;QACdG,OAAO,EAAE;MACX,CAAC;IACH;;IAEA;IACAX,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;IACnD,MAAMuB,cAAc,GAAG,MAAMlD,8BAA8B,CAACoB,IAAI,EAAEyB,KAAK,EAAEC,QAAQ,CAAC;IAClFpB,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEuB,cAAc,CAACC,IAAI,CAAC3B,GAAG,CAAC;;IAEvD;IACAE,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;IAC1D,MAAML,kBAAkB,CAAC;MACvBE,GAAG,EAAE0B,cAAc,CAACC,IAAI,CAAC3B,GAAG;MAC5BqB,KAAK,EAAEK,cAAc,CAACC,IAAI,CAACN,KAAK;MAChCE,IAAI;MACJK,IAAI,EAAE;IACR,CAAC,CAAC;IAEF1B,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;IACxC,OAAO;MACLO,OAAO,EAAE,IAAI;MACbG,OAAO,EAAE,sDAAsD;MAC/Db,GAAG,EAAE0B,cAAc,CAACC,IAAI,CAAC3B;IAC3B,CAAC;EACH,CAAC,CAAC,OAAOW,KAAK,EAAE;IACdT,OAAO,CAACS,KAAK,CAAC,iCAAiC,EAAE;MAC/CC,IAAI,EAAED,KAAK,CAACC,IAAI;MAChBC,OAAO,EAAEF,KAAK,CAACE,OAAO;MACtBC,OAAO,EAAEH;IACX,CAAC,CAAC;IAEF,IAAIA,KAAK,CAACC,IAAI,KAAK,2BAA2B,EAAE;MAC9C,OAAO;QACLF,OAAO,EAAE,KAAK;QACdG,OAAO,EAAE;MACX,CAAC;IACH;IAEA,OAAO;MACLH,OAAO,EAAE,KAAK;MACdG,OAAO,EAAE;IACX,CAAC;EACH;AACF,CAAC;AAED,eAAenB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}